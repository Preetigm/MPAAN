public class ShortestPalindrome {

    public static String shortestPalindrome(String s) {
        int n = s.length();
        int[][] dp = new int[n + 1][n + 1];

        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }

        for (int l = 2; l <= n; l++) {
            for (int i = 0; i <= n - l; i++) {
                int j = i + l - 1;
                if (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1] == l - 2) {
                    dp[i][j] = l;
                }
            }
        }

        int j = n - 1;
        for (int i = n - 1; i >= 0; i--) {
            if (dp[0][i] == s.length() - i) { // Corrected line: Use 's.length()' instead of 'len(s)'
                j = i - 1;
                break;
            }
        }

        return new StringBuilder(s.substring(j + 1))
                .reverse()
                .append(s)
                .toString();
    }

    public static void main(String[] args) {
        String s1 = "aacecaaa";
        String s2 = "abcd";

        System.out.println(shortestPalindrome(s1));  // Output: "aaacecaaa"
        System.out.println(shortestPalindrome(s2));  // Output: "dcbabcd"
    }
}
